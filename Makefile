# SYNOPSIS:
#
#   make - make everything
#   make test - make and run all tests
#   make clean - remove all files generated by make
#   make driver - make the main executable

# LIB_DIR should satisfy the following:
#   LIB_DIR/include/gflags contains Google Commandline Flags include files
#   LIB_DIR/include/glog contains Google Logging include files
#   LIB_DIR/include/gtest contains Google Test include files
#   LIB_DIR/src contains Google Test source files
#   LIB_DIR/lib contains libgflags* and libglog* library files.
LIB_DIR = /usr/local

# Where to find user code.
USER_DIR = .

# Flags passed to the preprocessor.
CPPFLAGS += -isystem $(LIB_DIR)/include

# Flags passed to the C++ compiler. Add -O3 for the highest optimization level.
# Add -ggdb for GDB debugging info.
CXXFLAGS += -Wall -Wextra -pthread -std=c++0x -O3

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = space_test feature_test dmaxent_test tree_test wlearner_test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(LIB_DIR)/include/gtest/*.h \
                $(LIB_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

test: $(TESTS)
	./space_test
	./tree_test
	./feature_test
	./wlearner_test
	./dmaxent_test
clean :
	rm -f $(TESTS) ./driver gtest_main.a *.o

# Builds gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(LIB_DIR)/src/*.cc $(LIB_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(LIB_DIR) $(CXXFLAGS) -c \
            $(LIB_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(LIB_DIR) $(CXXFLAGS) -c \
            $(LIB_DIR)/src/gtest_main.cc

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds tests.  A test should link with gtest_main.a.

space.o : $(USER_DIR)/space.cpp $(USER_DIR)/space.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/space.cpp

space_test.o : $(USER_DIR)/space_test.cpp $(USER_DIR)/constants.hpp \
	$(USER_DIR)/space.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/space_test.cpp

space_test : space.o space_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -static -lpthread $^ -o $@ -L$(LIB_DIR)/lib -lgflags -lglog

tree.o : $(USER_DIR)/tree.cpp $(USER_DIR)/tree.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/tree.cpp

tree_test.o : $(USER_DIR)/tree_test.cpp \
                     $(USER_DIR)/tree.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/tree_test.cpp

tree_test : space.o tree.o tree_test.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -static -lpthread $^ -o $@ -L$(LIB_DIR)/lib -lgflags -lglog

feature.o : $(USER_DIR)/feature.cpp $(USER_DIR)/feature.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/feature.cpp

feature_test.o : $(USER_DIR)/feature_test.cpp \
                     $(USER_DIR)/feature.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/feature_test.cpp

feature_test : space.o feature.o feature_test.o tree.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -static -lpthread $^ -o $@ -L$(LIB_DIR)/lib -lgflags -lglog

wlearner.o : $(USER_DIR)/wlearner.cpp $(USER_DIR)/wlearner.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/wlearner.cpp

wlearner_test.o : $(USER_DIR)/wlearner_test.cpp \
                     $(USER_DIR)/wlearner.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/wlearner_test.cpp

wlearner_test : space.o feature.o tree.o wlearner.o wlearner_test.o tree.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -static -lpthread $^ -o $@ -L$(LIB_DIR)/lib -lgflags -lglog


dmaxent.o : $(USER_DIR)/dmaxent.cpp $(USER_DIR)/dmaxent.hpp $(USER_DIR)/constants.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/dmaxent.cpp

dmaxent_test.o : $(USER_DIR)/dmaxent_test.cpp \
                     $(USER_DIR)/dmaxent.hpp $(GTEST_HEADERS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/dmaxent_test.cpp

dmaxent_test : space.o tree.o feature.o dmaxent.o dmaxent_test.o wlearner.o gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -static -lpthread $^ -o $@ -L$(LIB_DIR)/lib -lgflags -lglog

# Build the main executable

driver.o : $(USER_DIR)/driver.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/driver.cpp

driver : driver.o feature.o space.o dmaxent.o wlearner.o tree.o
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -static -lpthread $^ -o $@ -L$(LIB_DIR)/lib -lgflags -lglog
